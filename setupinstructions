# <!-- Flask app is a pattern that you should not deviate from
# Getting a flask project set up for development: -->

# <!-- 1.) set up file structure:
#         1.)app-folder
#             1.)__init__.py
#             2.)routes.py
#             3.)templates-folder
#                 -index.html-file
#         2.)config.py-file
#         3.).env-file -->
# <!--

# <!-- 2.) set up virtual environment-install programs and packages in limited spaces on the pc. Does not install in any other folder or globally on the pc. Some programs may conflict with Flask so needs to be in project folder only!
#         1.) in command terminal type: python -m venv venv - run once everytime you create a new flask project-venv folder should have been created.
#         2.) in command terminal type: venv\scripts\activate - run everytime you open the project-(venv)
#             windows: venv\scripts\activate
#             mac: source .venv/bin/activate
#         3.) select interpreter ->settings-> command palette-> python:search select interpret -> venv venv-->

# <!-- 3.) install packages:
#         1.)pip install flask: may get a warning message to update
#             a.)pip uninstall flask click colorama jinja2 markupsafe werkzeug itsdangerous
#             b.)python.exe -m pip install --upgrade pip
#             c.)pip install flask
#         2.)pip freeze > requirements.txt  - you must run this everytime you make changes or new installations.
#         3.)pip install python-dotenv -keeps secret variables and sensitive config variables for .env file
#         4.)pip freeze > requirements.txt
#          -->

# <!-- 4.) set up .gitignore- includes folder or filenames that we want git not to track/not put them publicly on github
#         1.)create .gitignore file outside of the app folder.
#         2.)inside the folder type: venv ->(new line) -> .env ->(new line) __pycache__
#         3.)follow normal steps to initialize and save repository
#         -->

# <!-- 5.) initializing our flask app:
#         1.)go to __init__.py
#         2.)from the flask package that we installed import the Flask object/class -> type: from flask import Flask.
#         3.)define/instantiate our Flask object...aka tell the computer that this is a flask app
#         type: app = Flask(__name__) -> __name__ is telling flask that we named the flask app, app -->

# <!-- 6.) setting up flask configuration:
#         1.)go to the config.py file.
#         2.)import os package -> type: import os
#         3.)set up the base directory of the entire package -> type: basedir = os.path.abspath(os.path.dirname(__name__))
#         4.) config variables setup
#         class Config:
#             """
#             set configuration variables for our entire      flask app
#             """
#             FLASK_APP = os.environ.get('FLASK_APP') #go get the FLASK_APP value from .env
#             FLASK_ENV = os.environ.get('FLASK.ENV')
#             SECRET_KEY = os.environ.get('SECRET_KEY')
#         5.) go to .env file -> type:
#                 FLASK_APP=app
#                 FLASK_ENV=development
#                 SECRET_KEY='934TXS'
#         6.)go back to init.py and import the configurations we set up
#                 type: #from our config file import the Config class that we created->
#                 from config import Config
#         7.)enter config in init.py:
#             # aka configure our flask app from the Config object we just wrote
#             app.config.from_object(Config)
# -->

# <!-- 7.) hello, world! Run the flask app(make sure the virtual environment is active):
#         1.)type:flask run -> may get an error -> we do not have any contents 
#         yet...

#     8.) github-setting up a repo for flask
#     -why you should bother with branches
            <!-- 1.)after completing the initial commit the regular way
            type: git checkout -b {name of the branch you want} example/git checkout -b basic setup
            2.)type: git push origin basicsetup 
            3.)type:git checkout master -->


# MVC-Models(objects/data DB models), Controller(Routes, what urls, buttons, actions, data), Views(HTML files, what the user actually sees,url that pings other routes.)

# ----------------CREATE ROUTES----------------
# #Flask routes control what content in shown on what url depending on how the user is accessing that url, what button they've pressed, etc.

# the general structure of a flask route is a function with a decorator. A decorator adds lines of code that run before and after the decorated fuction. 

# Our first route:
# goal-display the index.html file when user navigates to the base url aka http://127.0.0.1:5000
# 1.) we need access to our app
#         1.)import the app variable defined in __init__.py -> navigate to the routes folder
#         type:from app import app
#         2.)we need the ability to show an html sile at a specified url. Use the render template function
#         type: from flask import render_template
        
#         @app.route('/') # decorator says: this is a route of the flask app 'app' w/the url endpoint '/'
#         def home():
#             return render_template('index.html')
#         3.)Let flask app know about the existence of our routes ->__init__.py:
#             type: from . import routes